// The people management page for Tab "2. People"
'use client';

import { useState, useRef } from 'react';
import { useSchedulingData } from '@/hooks/useSchedulingData';
import ItemGroupEditorPage from '@/components/ItemGroupEditorPage';
import { Mode } from '@/constants/modes';
import { DataType } from '@/types/scheduling';
import { filterAutoGenerated } from '@/utils/keywords';
import { FiUpload } from 'react-icons/fi';

export default function PeoplePage() {
  const {
    peopleData,
    // Get functions to pass as props
    addItem,
    addGroup,
    updateItem,
    updateGroup,
    deleteItem,
    deleteGroup,
    removeItemFromGroup,
    reorderItems,
    reorderGroups,
  } = useSchedulingData();

  const bulkAddPeople = (names: string[]) => {
    if (names.length === 0) {
      alert('No people names found in the uploaded file.');
      return;
    }

    const existingItemsMap = new Map(peopleData.items.map(item => [item.id, item]));
    const reorderedItems = [];
    const usedIds = new Set<string>();

    // First, add items in the order specified by names
    for (const name of names) {
      if (usedIds.has(name)) {
        alert(`Duplicate person name "${name}" found in the uploaded list. Please remove duplicates.`);
        return;
      }
      usedIds.add(name);

      const existingItem = existingItemsMap.get(name);
      if (existingItem) {
        // Move existing person to follow names order
        reorderedItems.push(existingItem);
      } else {
        // Create new item for non-existing name
        reorderedItems.push({
          id: name,
          description: '',
          history: []
        });
      }
    }

    // Then, add any existing items that weren't mentioned in names (keep them at the end)
    for (const existingItem of peopleData.items) {
      if (!usedIds.has(existingItem.id)) {
        reorderedItems.push(existingItem);
      }
    }

    // Calculate counts for the three types of people
    const existingReorderedCount = [...usedIds].filter(name => existingItemsMap.has(name)).length;
    const newlyAddedCount = usedIds.size - existingReorderedCount;
    const existingMovedToEndCount = peopleData.items.filter(item => !usedIds.has(item.id)).length;

    // Create the updated people data with reordered items
    const updatedPeopleData = {
      ...peopleData,
      items: reorderedItems
    };

    // Use reorderItems to trigger the update with the new data
    // This is a bit of a hack, but it works because reorderItems
    // calls updateData which handles the state update properly
    reorderItems(DataType.PEOPLE, updatedPeopleData, updatedPeopleData.items);
    alert(`Successfully uploaded ${names.length} people: ${existingReorderedCount} existing people reordered, ${newlyAddedCount} new people added, ${existingMovedToEndCount} existing people moved to end.`);
  };

  const [mode, setMode] = useState<Mode>(Mode.NORMAL);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handlePeopleUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (e) => {
      const content = e.target?.result as string;
      if (!content) {
        alert('No content found in the uploaded file.');
        return;
      }

      // Parse newline-separated names
      const names = content
        .split('\n')
        .map(name => name.trim())
        .filter(name => name.length > 0 && !name.startsWith('#')) // Remove empty lines and comments
        .slice(0, 1000); // Limit to 1000 names for safety

      console.log(names);

      // Use the bulk add function to add all people at once
      bulkAddPeople(names);
    };

    reader.readAsText(file);
    // Reset file input
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  const uploadPeopleButton = (
    <div className="relative">
      <input
        ref={fileInputRef}
        type="file"
        accept=".txt,.csv"
        onChange={handlePeopleUpload}
        className="hidden"
      />
      <button
        onClick={() => fileInputRef.current?.click()}
        className="flex items-center gap-2 px-3 py-2 text-sm font-medium rounded-md transition-colors bg-blue-600 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
        title="Upload a file with newline-separated people names. Existing people will be reordered to match the file order, new people will be added, and any existing people not in the file will be moved to the end."
      >
        <FiUpload className="h-4 w-4" />
        Upload People
      </button>
    </div>
  );

  // Instructions for the help component
  const instructions = [
    "Add people who will be scheduled for work (e.g., \"Alice\", \"Bob\", \"Charlie\")",
    "Create groups to organize people (e.g., \"Nurses\", \"Senior Nurses\", \"Contractors\")",
    "Click and drag through checkboxes to quickly select multiple groups or people when adding or editing",
    "Drag and drop to reorder people or groups",
    "Double-click to edit names or descriptions",
    "Navigate using the tabs or keyboard shortcuts (1, 2, etc.) to continue setup"
  ];

  return (
    <ItemGroupEditorPage
      title="People Management"
      instructions={instructions}
      data={peopleData}
      dataType={DataType.PEOPLE}
      mode={mode}
      setMode={setMode}
      addItem={addItem}
      addGroup={addGroup}
      updateItem={updateItem}
      updateGroup={updateGroup}
      deleteItem={deleteItem}
      deleteGroup={deleteGroup}
      removeItemFromGroup={removeItemFromGroup}
      reorderItems={reorderItems}
      reorderGroups={reorderGroups}
      filterItemGroups={filterAutoGenerated}
      itemTableHeaderAction={uploadPeopleButton}
    />
  );
}
