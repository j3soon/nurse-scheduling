// The people management page for Tab "2. People"
'use client';

import { useState, useRef } from 'react';
import { useSchedulingData } from '@/hooks/useSchedulingData';
import ItemGroupEditorPage from '@/components/ItemGroupEditorPage';
import { Mode } from '@/constants/modes';
import { DataType } from '@/types/scheduling';
import { filterAutoGenerated } from '@/utils/keywords';
import { FiUpload } from 'react-icons/fi';

export default function PeoplePage() {
  const {
    peopleData,
    // Get functions to pass as props
    addItem,
    addGroup,
    updateItem,
    updateGroup,
    deleteItem,
    deleteGroup,
    removeItemFromGroup,
    reorderItems,
    reorderGroups,
  } = useSchedulingData();

  const bulkAddPeople = (names: string[]) => {
    // Filter out names that already exist
    const newNames = names.filter(name =>
      !peopleData.items.find(item => item.id === name)
    );

    if (newNames.length === 0) return;

    // Create new items for all unique names
    const newItems = newNames.map(name => ({
      id: name,
      description: '',
      history: []
    }));

    // Create the updated people data with all new items at once
    const updatedPeopleData = {
      ...peopleData,
      items: [...peopleData.items, ...newItems]
    };

    // Use reorderItems to trigger the update with the new data
    // This is a bit of a hack, but it works because reorderItems
    // calls updateData which handles the state update properly
    reorderItems(DataType.PEOPLE, updatedPeopleData, updatedPeopleData.items);
  };

  const [mode, setMode] = useState<Mode>(Mode.NORMAL);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (e) => {
      const content = e.target?.result as string;
      if (!content) return;

      // Parse newline-separated names
      const names = content
        .split('\n')
        .map(name => name.trim())
        .filter(name => name.length > 0 && !name.startsWith('#')) // Remove empty lines and comments
        .slice(0, 1000); // Limit to 1000 names for safety

      console.log(names);

      // Use the bulk add function to add all people at once
      bulkAddPeople(names);
    };

    reader.readAsText(file);
    // Reset file input
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  const uploadButton = (
    <div className="relative">
      <input
        ref={fileInputRef}
        type="file"
        accept=".txt,.csv"
        onChange={handleFileUpload}
        className="hidden"
      />
      <button
        onClick={() => fileInputRef.current?.click()}
        className="flex items-center gap-2 px-3 py-2 text-sm font-medium rounded-md transition-colors bg-blue-600 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
        title="Upload a file with newline-separated people names"
      >
        <FiUpload className="h-4 w-4" />
        Upload People
      </button>
    </div>
  );

  // Instructions for the help component
  const instructions = [
    "Add people who will be scheduled for work (e.g., \"Alice\", \"Bob\", \"Charlie\")",
    "Create groups to organize people (e.g., \"Nurses\", \"Senior Nurses\", \"Contractors\")",
    "Click and drag through checkboxes to quickly select multiple groups or people when adding or editing",
    "Drag and drop to reorder people or groups",
    "Double-click to edit names or descriptions",
    "Navigate using the tabs or keyboard shortcuts (1, 2, etc.) to continue setup"
  ];

  return (
    <ItemGroupEditorPage
      title="People Management"
      instructions={instructions}
      data={peopleData}
      dataType={DataType.PEOPLE}
      mode={mode}
      setMode={setMode}
      addItem={addItem}
      addGroup={addGroup}
      updateItem={updateItem}
      updateGroup={updateGroup}
      deleteItem={deleteItem}
      deleteGroup={deleteGroup}
      removeItemFromGroup={removeItemFromGroup}
      reorderItems={reorderItems}
      reorderGroups={reorderGroups}
      filterItemGroups={filterAutoGenerated}
      itemTableHeaderAction={uploadButton}
    />
  );
}
