// The types for the scheduling data.
export interface Item {
  id: string;
  description: string;
  history?: string[];  // Array of shift type IDs representing historical assignments for people
  isAutoGenerated?: boolean;
}

export interface Group {
  id: string;
  members: string[]; // Array of item IDs
  description: string;
  isAutoGenerated?: boolean;
}

export interface AutoGeneratedItem {
  id: string;
  description: string;
}

export interface AutoGeneratedGroup {
  id: string;
  description: string;
  generateMembers: (items: Item[], dateRange?: DateRange) => string[];
}

export interface DateRange {
  startDate?: Date;
  endDate?: Date;
}

export enum DataType {
  DATES = 'dates',
  PEOPLE = 'people',
  SHIFT_TYPES = 'shiftTypes'
}

export const AT_MOST_ONE_SHIFT_PER_DAY = 'at most one shift per day';
export const SHIFT_TYPE_REQUIREMENT = 'shift type requirement';
export const SHIFT_REQUEST = 'shift request';
export const SHIFT_TYPE_SUCCESSIONS = 'shift type successions';
export const SHIFT_COUNT = 'shift count';
export const SHIFT_AFFINITY = 'shift affinity';

export const SUPPORTED_EXPRESSIONS = ['|x - T|^2', 'x >= T', 'x <= T', 'x > T', 'x < T', 'x = T'] as const;
export const SUPPORTED_SPECIAL_TARGETS = ['floor(AVG_SHIFTS_PER_PERSON)', 'ceil(AVG_SHIFTS_PER_PERSON)', 'round(AVG_SHIFTS_PER_PERSON)'] as const;

export interface BasePreference {
  type: string;
  description?: string;
}

export interface AtMostOneShiftPerDayPreference extends BasePreference {
  type: typeof AT_MOST_ONE_SHIFT_PER_DAY;
}

export interface ShiftTypeRequirementsPreference extends BasePreference {
  type: typeof SHIFT_TYPE_REQUIREMENT;
  description?: string;
  shiftType: string[];
  requiredNumPeople: number;
  qualifiedPeople: string[];
  preferredNumPeople?: number;
  date: string[];
  weight: number;
}

export interface ShiftRequestPreference extends BasePreference {
  type: typeof SHIFT_REQUEST;
  description?: string;
  person: string[];  // Should only contain one person
  date: string[];  // Can contain multiple dates
  shiftType: string[];  // Should only contain one shift type
  weight: number;
}

export interface ShiftTypeSuccessionsPreference extends BasePreference {
  type: typeof SHIFT_TYPE_SUCCESSIONS;
  description?: string;
  person: string[];
  pattern: string[];  // List of shift type IDs that are in succession
  date: string[];
  weight: number;
}

export interface ShiftCountPreference extends BasePreference {
  type: typeof SHIFT_COUNT;
  description?: string;
  person: string[];
  countDates: string[];
  countShiftTypes: string[];
  expression: typeof SUPPORTED_EXPRESSIONS[number];
  target: number | typeof SUPPORTED_SPECIAL_TARGETS[number];
  weight: number;
}

export interface ShiftAffinityPreference extends BasePreference {
  type: typeof SHIFT_AFFINITY;
  description?: string;
  date: string[];
  people1: string[];
  people2: string[];
  shiftTypes: string[];
  weight: number;
}

// Union type for all preference types in the flattened structure
export type Preference =
  | AtMostOneShiftPerDayPreference
  | ShiftTypeRequirementsPreference
  | ShiftRequestPreference
  | ShiftTypeSuccessionsPreference
  | ShiftCountPreference
  | ShiftAffinityPreference;
